// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/notifications/usecase.go

// Package mock_notifications is a generated GoMock package.
package mock_notifications

import (
	domain "github.com/go-park-mail-ru/2020_2_Eternity/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUsecase is a mock of IUsecase interface
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// CreateNotes mocks base method
func (m *MockIUsecase) CreateNotes(iNote interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotes", iNote)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNotes indicates an expected call of CreateNotes
func (mr *MockIUsecaseMockRecorder) CreateNotes(iNote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotes", reflect.TypeOf((*MockIUsecase)(nil).CreateNotes), iNote)
}

// GetUserNotes mocks base method
func (m *MockIUsecase) GetUserNotes(userId int) ([]domain.NoteResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotes", userId)
	ret0, _ := ret[0].([]domain.NoteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotes indicates an expected call of GetUserNotes
func (mr *MockIUsecaseMockRecorder) GetUserNotes(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotes", reflect.TypeOf((*MockIUsecase)(nil).GetUserNotes), userId)
}

// UpdateNote mocks base method
func (m *MockIUsecase) UpdateNote(noteId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", noteId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote
func (mr *MockIUsecaseMockRecorder) UpdateNote(noteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockIUsecase)(nil).UpdateNote), noteId)
}

// UpdateUserNotes mocks base method
func (m *MockIUsecase) UpdateUserNotes(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserNotes", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserNotes indicates an expected call of UpdateUserNotes
func (mr *MockIUsecaseMockRecorder) UpdateUserNotes(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserNotes", reflect.TypeOf((*MockIUsecase)(nil).UpdateUserNotes), userId)
}
