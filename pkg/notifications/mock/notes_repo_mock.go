// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/notifications/repository.go

// Package mock_notifications is a generated GoMock package.
package mock_notifications

import (
	domain "github.com/go-park-mail-ru/2020_2_Eternity/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRepository is a mock of IRepository interface
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// StoreNote mocks base method
func (m *MockIRepository) StoreNote(n *domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNote", n)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNote indicates an expected call of StoreNote
func (mr *MockIRepositoryMockRecorder) StoreNote(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNote", reflect.TypeOf((*MockIRepository)(nil).StoreNote), n)
}

// GetNoteById mocks base method
func (m *MockIRepository) GetNoteById(noteId int) (domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteById", noteId)
	ret0, _ := ret[0].(domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteById indicates an expected call of GetNoteById
func (mr *MockIRepositoryMockRecorder) GetNoteById(noteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteById", reflect.TypeOf((*MockIRepository)(nil).GetNoteById), noteId)
}

// GetNotesToUser mocks base method
func (m *MockIRepository) GetNotesToUser(userId int) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesToUser", userId)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesToUser indicates an expected call of GetNotesToUser
func (mr *MockIRepositoryMockRecorder) GetNotesToUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesToUser", reflect.TypeOf((*MockIRepository)(nil).GetNotesToUser), userId)
}

// UpdateNoteIsRead mocks base method
func (m *MockIRepository) UpdateNoteIsRead(noteId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNoteIsRead", noteId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNoteIsRead indicates an expected call of UpdateNoteIsRead
func (mr *MockIRepositoryMockRecorder) UpdateNoteIsRead(noteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNoteIsRead", reflect.TypeOf((*MockIRepository)(nil).UpdateNoteIsRead), noteId)
}

// UpdateUserNotes mocks base method
func (m *MockIRepository) UpdateUserNotes(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserNotes", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserNotes indicates an expected call of UpdateUserNotes
func (mr *MockIRepositoryMockRecorder) UpdateUserNotes(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserNotes", reflect.TypeOf((*MockIRepository)(nil).UpdateUserNotes), userId)
}
