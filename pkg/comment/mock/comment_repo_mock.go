// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/comment/repository.go

// Package mock_comment is a generated GoMock package.
package mock_comment

import (
	domain "github.com/go-park-mail-ru/2020_2_Eternity/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRepository is a mock of IRepository interface
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// StoreChildComment mocks base method
func (m *MockIRepository) StoreChildComment(c *domain.Comment, parentId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreChildComment", c, parentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreChildComment indicates an expected call of StoreChildComment
func (mr *MockIRepositoryMockRecorder) StoreChildComment(c, parentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreChildComment", reflect.TypeOf((*MockIRepository)(nil).StoreChildComment), c, parentId)
}

// StoreRootComment mocks base method
func (m *MockIRepository) StoreRootComment(c *domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRootComment", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRootComment indicates an expected call of StoreRootComment
func (mr *MockIRepositoryMockRecorder) StoreRootComment(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRootComment", reflect.TypeOf((*MockIRepository)(nil).StoreRootComment), c)
}

// GetComment mocks base method
func (m *MockIRepository) GetComment(commentId int) (domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", commentId)
	ret0, _ := ret[0].(domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockIRepositoryMockRecorder) GetComment(commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockIRepository)(nil).GetComment), commentId)
}

// GetPinComments mocks base method
func (m *MockIRepository) GetPinComments(pinId int) ([]domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinComments", pinId)
	ret0, _ := ret[0].([]domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinComments indicates an expected call of GetPinComments
func (mr *MockIRepositoryMockRecorder) GetPinComments(pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinComments", reflect.TypeOf((*MockIRepository)(nil).GetPinComments), pinId)
}
