// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/comment/usecase.go

// Package mock_comment is a generated GoMock package.
package mock_comment

import (
	domain "github.com/go-park-mail-ru/2020_2_Eternity/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUsecase is a mock of IUsecase interface
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// CreateComment mocks base method
func (m *MockIUsecase) CreateComment(commentReq *domain.CommentCreateReq, userId int) (domain.CommentResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", commentReq, userId)
	ret0, _ := ret[0].(domain.CommentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockIUsecaseMockRecorder) CreateComment(commentReq, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockIUsecase)(nil).CreateComment), commentReq, userId)
}

// GetPinComments mocks base method
func (m *MockIUsecase) GetPinComments(pinId int) ([]domain.CommentResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinComments", pinId)
	ret0, _ := ret[0].([]domain.CommentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinComments indicates an expected call of GetPinComments
func (mr *MockIUsecaseMockRecorder) GetPinComments(pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinComments", reflect.TypeOf((*MockIUsecase)(nil).GetPinComments), pinId)
}

// GetCommentById mocks base method
func (m *MockIUsecase) GetCommentById(commentId int) (domain.CommentResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentById", commentId)
	ret0, _ := ret[0].(domain.CommentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentById indicates an expected call of GetCommentById
func (mr *MockIUsecaseMockRecorder) GetCommentById(commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentById", reflect.TypeOf((*MockIUsecase)(nil).GetCommentById), commentId)
}
